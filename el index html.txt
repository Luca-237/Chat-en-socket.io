<!DOCTYPE html>
<html>
<head>
    <title>Chat con Socket.IO</title>
    <style>
        body { margin: 0; padding-bottom: 3rem; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; }
        #form { background: rgba(0, 0, 0, 0.15); padding: 0.25rem; position: fixed; bottom: 0; left: 0; right: 0; display: flex; height: 3rem; box-sizing: border-box; backdrop-filter: blur(10px); }
        #input { border: none; padding: 0 1rem; flex-grow: 1; border-radius: 2rem; margin: 0.25rem; }
        #input:focus { outline: none; }
        #form > button { background: #333; border: none; padding: 0 1rem; margin: 0.25rem; border-radius: 3px; outline: none; color: #fff; }
        #messages { list-style-type: none; margin: 0; padding: 0; }
        #messages > li { padding: 0.5rem 1rem; }
        #messages > li:nth-child(odd) { background: #eee; }
        #typing-status { font-style: italic; color: #777; margin-left: 1rem; }
    </style>
</head>
<body>
    <ul id="messages"></ul>
    <div id="typing-status"></div>
    <form id="form" action="">
        <input id="input" autocomplete="off" /><button>Enviar</button>
    </form>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        // Inicializa la conexión con el servidor Socket.IO
        const socket = io();

        const form = document.getElementById('form');
        const input = document.getElementById('input');
        const messages = document.getElementById('messages');
        const typingStatus = document.getElementById('typing-status');

        let typingTimeout; // Para controlar cuándo el usuario deja de escribir

        // Escucha el evento 'submit' del formulario
        form.addEventListener('submit', (e) => {
            e.preventDefault(); // Previene que la página se recargue
            if (input.value) {
                // Emite el evento 'chat message' al servidor con el valor del input
                socket.emit('chat message', input.value);
                input.value = ''; // Limpia el input
                clearTimeout(typingTimeout); // Limpia cualquier timeout de 'typing'
                socket.emit('stop typing'); // Envía un evento para dejar de escribir
            }
        });

        // Escucha cambios en el input para detectar si el usuario está escribiendo
        input.addEventListener('input', () => {
            socket.emit('typing'); // Notifica al servidor que estoy escribiendo

            // Si ya hay un timeout, límpialo para reiniciar el contador
            if (typingTimeout) {
                clearTimeout(typingTimeout);
            }
            // Establece un timeout para enviar 'stop typing' si no hay más actividad en 1.5 segundos
            typingTimeout = setTimeout(() => {
                socket.emit('stop typing');
            }, 1500);
        });


        // Escucha el evento 'chat message' desde el servidor
        socket.on('chat message', (msg) => {
            const item = document.createElement('li');
            item.textContent = msg;
            messages.appendChild(item);
            window.scrollTo(0, document.body.scrollHeight); // Desplázate al último mensaje
            typingStatus.textContent = ''; // Limpia el estado de "escribiendo"
        });

        // Escucha el evento 'user typing' desde el servidor
        socket.on('user typing', (status) => {
            typingStatus.textContent = status;
            window.scrollTo(0, document.body.scrollHeight);
        });

        // Opcional: Manejo de reconexiones/desconexiones (Socket.IO lo maneja automáticamente, pero puedes escuchar los eventos)
        socket.on('connect', () => {
            console.log('Conectado al servidor Socket.IO');
        });

        socket.on('disconnect', () => {
            console.log('Desconectado del servidor Socket.IO');
        });

        socket.on('connect_error', (error) => {
            console.error('Error de conexión:', error);
        });

    </script>
</body>
</html>